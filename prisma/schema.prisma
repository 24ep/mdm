// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  email     String   @unique
  name      String
  password  String
  role      String   @default("USER")
  avatar    String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  createdSpaces     Space[]           @relation("SpaceCreator")
  spaceMemberships SpaceMember[]     @relation("UserSpaceMembers")
  createdDataModels DataModel[]       @relation("DataModelCreator")
  createdDataRecords DataRecord[]     @relation("DataRecordCreator")
  createdEavEntities EavEntity[]       @relation("EavEntityCreator")
  notifications     Notification[]    @relation("UserNotifications")
  teamMemberships   TeamMember[]      @relation("UserTeamMembers")
  chatSessions      ChatSession[]     @relation("UserChatSessions")
  auditLogs         AuditLog[]        @relation("UserAuditLogs")

  @@map("users")
}

model Space {
  id                String   @id @default(uuid()) @db.Uuid
  name              String
  description       String?
  slug              String   @unique
  isDefault         Boolean  @default(false) @map("is_default")
  isActive          Boolean  @default(true) @map("is_active")
  icon              String?
  logoUrl           String?  @map("logo_url")
  features          Json?    @default("{}")
  sidebarConfig     Json?    @map("sidebar_config")
  enableAssignments Boolean  @default(true) @map("enable_assignments")
  enableBulkActivity Boolean @default(true) @map("enable_bulk_activity")
  enableWorkflows   Boolean  @default(true) @map("enable_workflows")
  enableDashboard   Boolean  @default(true) @map("enable_dashboard")
  createdBy         String   @map("created_by") @db.Uuid
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  deletedAt         DateTime? @map("deleted_at")

  // Relations
  creator           User            @relation("SpaceCreator", fields: [createdBy], references: [id])
  members           SpaceMember[]   @relation("SpaceMembers")
  dataModels        DataModelSpace[] @relation("SpaceDataModels")
  attachmentStorage SpaceAttachmentStorage[] @relation("SpaceAttachments")
  externalConnections ExternalConnection[] @relation("SpaceExternalConnections")
  notebooks         Notebook[]      @relation("SpaceNotebooks")
  chatSessions      ChatSession[]  @relation("SpaceChatSessions")

  @@map("spaces")
}

model SpaceMember {
  id      String @id @default(uuid()) @db.Uuid
  spaceId String @map("space_id")
  userId  String @map("user_id")
  role    String @default("MEMBER")

  // Relations
  space Space @relation("SpaceMembers", fields: [spaceId], references: [id], onDelete: Cascade)
  user  User  @relation("UserSpaceMembers", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([spaceId, userId])
  @@map("space_members")
}

// Enhanced EAV Entity Types
model EntityType {
  id          String   @id @default(uuid()) @db.Uuid
  name        String   @unique
  displayName String   @map("display_name")
  description String?
  parentId    String?  @map("parent_id") @db.Uuid
  isAbstract  Boolean  @default(false) @map("is_abstract")
  isActive    Boolean  @default(true) @map("is_active")
  sortOrder   Int      @default(0) @map("sort_order")
  metadata    Json?    @default("{}")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  // Relations
  parent      EntityType?     @relation("EntityTypeHierarchy", fields: [parentId], references: [id])
  children     EntityType[]      @relation("EntityTypeHierarchy")
  attributes   EavAttribute[]    @relation("EntityTypeAttributes")
  entities     EavEntity[]       @relation("EntityTypeEntities")
  attributeGroups AttributeGroup[] @relation("EntityTypeAttributeGroups")
  referencedAttributes EavAttribute[] @relation("ReferenceEntityType")
  childInheritances AttributeInheritance[] @relation("ChildEntityType")
  parentInheritances AttributeInheritance[] @relation("ParentEntityType")

  @@map("entity_types")
}

// Attribute Groups for better organization
model AttributeGroup {
  id           String   @id @default(uuid()) @db.Uuid
  name         String
  displayName   String   @map("display_name")
  description   String?
  entityTypeId String   @map("entity_type_id") @db.Uuid
  sortOrder    Int      @default(0) @map("sort_order")
  isCollapsible Boolean @default(true) @map("is_collapsible")
  isRequired   Boolean  @default(false) @map("is_required")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  entityType   EntityType    @relation("EntityTypeAttributeGroups", fields: [entityTypeId], references: [id], onDelete: Cascade)
  attributes  EavAttribute[] @relation("AttributeGroupAttributes")

  @@map("attribute_groups")
}

// Enhanced EAV Attributes
model EavAttribute {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  displayName String   @map("display_name")
  description String?
  
  // Entity relationship
  entityTypeId     String  @map("entity_type_id") @db.Uuid
  attributeGroupId String? @map("attribute_group_id") @db.Uuid
  
  // Data type and constraints
  dataType    String @map("data_type") // eav_data_type enum
  cardinality String @default("SINGLE") // attribute_cardinality enum
  scope       String @default("INSTANCE") // attribute_scope enum
  
  // Validation and constraints
  isRequired  Boolean @default(false) @map("is_required")
  isUnique    Boolean @default(false) @map("is_unique")
  isIndexed   Boolean @default(false) @map("is_indexed")
  isSearchable Boolean @default(true) @map("is_searchable")
  isAuditable Boolean @default(true) @map("is_auditable")
  
  // Default values and options
  defaultValue   String? @map("default_value")
  options       Json?   @default("{}")
  validationRules Json? @map("validation_rules") @default("{}")
  
  // UI and display
  sortOrder   Int     @default(0) @map("sort_order")
  isVisible   Boolean @default(true) @map("is_visible")
  isEditable  Boolean @default(true) @map("is_editable")
  helpText    String? @map("help_text")
  placeholder String?
  
  // Reference attributes (for foreign keys)
  referenceEntityTypeId String? @map("reference_entity_type_id") @db.Uuid
  referenceDisplayField String? @map("reference_display_field")
  
  // Auto-increment support
  isAutoIncrement           Boolean @default(false) @map("is_auto_increment")
  autoIncrementPrefix       String  @default("") @map("auto_increment_prefix")
  autoIncrementSuffix       String  @default("") @map("auto_increment_suffix")
  autoIncrementStart        Int     @default(1) @map("auto_increment_start")
  autoIncrementPadding      Int     @default(3) @map("auto_increment_padding")
  currentAutoIncrementValue Int     @default(0) @map("current_auto_increment_value")
  
  // External system integration
  externalColumn String? @map("external_column")
  externalMapping Json? @map("external_mapping") @default("{}")
  
  // Metadata
  metadata Json? @default("{}")
  isActive Boolean @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  // Relations
  entityType       EntityType        @relation("EntityTypeAttributes", fields: [entityTypeId], references: [id], onDelete: Cascade)
  attributeGroup   AttributeGroup?   @relation("AttributeGroupAttributes", fields: [attributeGroupId], references: [id], onDelete: SetNull)
  referenceEntityType EntityType?   @relation("ReferenceEntityType", fields: [referenceEntityTypeId], references: [id])
  values           EavValue[]        @relation("AttributeValues")
  dependencies     AttributeDependency[] @relation("DependentAttributes")
  dependents       AttributeDependency[] @relation("DependsOnAttributes")
  inheritances     AttributeInheritance[] @relation("AttributeInheritances")

  @@unique([entityTypeId, name])
  @@map("eav_attributes")
}

// Enhanced Entity Instances
model EavEntity {
  id          String   @id @default(uuid()) @db.Uuid
  entityTypeId String  @map("entity_type_id") @db.Uuid
  externalId  String?  @map("external_id")
  isActive    Boolean  @default(true) @map("is_active")
  metadata    Json?    @default("{}")
  createdBy   String?  @map("created_by") @db.Uuid
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  // Relations
  entityType EntityType @relation("EntityTypeEntities", fields: [entityTypeId], references: [id], onDelete: Cascade)
  creator    User?      @relation("EavEntityCreator", fields: [createdBy], references: [id])
  values     EavValue[] @relation("EntityValues")

  @@unique([entityTypeId, externalId])
  @@map("eav_entities")
}

// Enhanced Values table with type-specific columns
model EavValue {
  id          String   @id @default(uuid()) @db.Uuid
  entityId    String   @map("entity_id") @db.Uuid
  attributeId String   @map("attribute_id") @db.Uuid
  
  // Type-specific value columns for better performance
  textValue     String?   @map("text_value")
  numberValue   Decimal?  @map("number_value") @db.Decimal(20, 6)
  booleanValue  Boolean?  @map("boolean_value")
  dateValue     DateTime? @map("date_value") @db.Date
  datetimeValue DateTime? @map("datetime_value")
  jsonValue     Json?     @map("json_value")
  blobValue     Bytes?    @map("blob_value")
  
  // Metadata
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  entity    EavEntity    @relation("EntityValues", fields: [entityId], references: [id], onDelete: Cascade)
  attribute EavAttribute @relation("AttributeValues", fields: [attributeId], references: [id], onDelete: Cascade)

  @@unique([entityId, attributeId])
  @@map("eav_values")
}

// Attribute Dependencies for complex relationships
model AttributeDependency {
  id                    String @id @default(uuid()) @db.Uuid
  dependentAttributeId  String @map("dependent_attribute_id") @db.Uuid
  dependsOnAttributeId  String @map("depends_on_attribute_id") @db.Uuid
  conditionType         String @map("condition_type")
  conditionValue        String? @map("condition_value")
  isActive              Boolean @default(true) @map("is_active")
  createdAt             DateTime @default(now()) @map("created_at")

  // Relations
  dependentAttribute EavAttribute @relation("DependentAttributes", fields: [dependentAttributeId], references: [id], onDelete: Cascade)
  dependsOnAttribute EavAttribute @relation("DependsOnAttributes", fields: [dependsOnAttributeId], references: [id], onDelete: Cascade)

  @@map("attribute_dependencies")
}

// Attribute Inheritance for entity type hierarchies
model AttributeInheritance {
  id                    String @id @default(uuid()) @db.Uuid
  childEntityTypeId     String @map("child_entity_type_id") @db.Uuid
  parentEntityTypeId    String @map("parent_entity_type_id") @db.Uuid
  attributeId           String @map("attribute_id") @db.Uuid
  inheritanceType       String @default("INHERIT") @map("inheritance_type")
  overriddenMetadata    Json?  @map("overridden_metadata") @default("{}")
  createdAt             DateTime @default(now()) @map("created_at")

  // Relations
  childEntityType  EntityType    @relation("ChildEntityType", fields: [childEntityTypeId], references: [id], onDelete: Cascade)
  parentEntityType EntityType    @relation("ParentEntityType", fields: [parentEntityTypeId], references: [id], onDelete: Cascade)
  attribute        EavAttribute  @relation("AttributeInheritances", fields: [attributeId], references: [id], onDelete: Cascade)

  @@unique([childEntityTypeId, attributeId])
  @@map("attribute_inheritance")
}

// Value History for audit trail
model EavValueHistory {
  id                String   @id @default(uuid()) @db.Uuid
  entityId          String   @map("entity_id") @db.Uuid
  attributeId       String   @map("attribute_id") @db.Uuid
  oldTextValue      String?  @map("old_text_value")
  oldNumberValue    Decimal? @map("old_number_value") @db.Decimal(20, 6)
  oldBooleanValue   Boolean? @map("old_boolean_value")
  oldDateValue      DateTime? @map("old_date_value") @db.Date
  oldDatetimeValue  DateTime? @map("old_datetime_value")
  oldJsonValue      Json?    @map("old_json_value")
  oldBlobValue      Bytes?   @map("old_blob_value")
  newTextValue      String?  @map("new_text_value")
  newNumberValue    Decimal? @map("new_number_value") @db.Decimal(20, 6)
  newBooleanValue   Boolean? @map("new_boolean_value")
  newDateValue      DateTime? @map("new_date_value") @db.Date
  newDatetimeValue  DateTime? @map("new_datetime_value")
  newJsonValue      Json?    @map("new_json_value")
  newBlobValue      Bytes?   @map("new_blob_value")
  changedBy         String?  @map("changed_by") @db.Uuid
  changeReason      String?  @map("change_reason")
  createdAt         DateTime @default(now()) @map("created_at")

  @@map("eav_value_history")
}

// Legacy DataModel for backward compatibility
model DataModel {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  description String?
  sortOrder   Int      @default(0) @map("sort_order")
  isActive    Boolean  @default(true) @map("is_active")
  createdBy   String   @map("created_by") @db.Uuid
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  // Relations
  creator     User            @relation("DataModelCreator", fields: [createdBy], references: [id])
  spaces      DataModelSpace[] @relation("DataModelSpaces")
  attributes  Attribute[]     @relation("DataModelAttributes")
  dataRecords DataRecord[]    @relation("DataModelRecords")
  externalConnections ExternalConnection[] @relation("ExternalConnectionDataModels")

  @@map("data_models")
}

model DataModelSpace {
  id          String @id @default(uuid()) @db.Uuid
  dataModelId String @map("data_model_id")
  spaceId     String @map("space_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  dataModel DataModel @relation("DataModelSpaces", fields: [dataModelId], references: [id], onDelete: Cascade)
  space     Space     @relation("SpaceDataModels", fields: [spaceId], references: [id], onDelete: Cascade)

  @@unique([dataModelId, spaceId])
  @@map("data_model_spaces")
}

// Legacy Attribute model for backward compatibility
model Attribute {
  id              String   @id @default(uuid()) @db.Uuid
  name            String
  displayName     String   @map("display_name")
  type            String
  description     String?
  isRequired      Boolean  @default(false) @map("is_required")
  isUnique        Boolean  @default(false) @map("is_unique")
  isPrimaryKey    Boolean? @default(false) @map("is_primary_key")
  isForeignKey    Boolean? @default(false) @map("is_foreign_key")
  defaultValue    String?  @map("default_value")
  validationRules Json?    @map("validation_rules")
  options         Json?
  order           Int      @default(0) @map("order")
  isActive        Boolean  @default(true) @map("is_active")
  deletedAt       DateTime? @map("deleted_at")
  
  // Data entity support
  dataEntityModelId    String? @map("data_entity_model_id")
  dataEntityAttributeId String? @map("data_entity_attribute_id")
  
  // Auto-increment support
  isAutoIncrement           Boolean @default(false) @map("is_auto_increment")
  autoIncrementPrefix       String  @default("") @map("auto_increment_prefix")
  autoIncrementSuffix       String  @default("") @map("auto_increment_suffix")
  autoIncrementStart        Int     @default(1) @map("auto_increment_start")
  autoIncrementPadding      Int     @default(3) @map("auto_increment_padding")
  currentAutoIncrementValue Int     @default(0) @map("current_auto_increment_value")
  
  // External connection support
  externalColumn String? @map("external_column")
  
  dataModelId     String   @map("data_model_id")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  dataModel       DataModel       @relation("DataModelAttributes", fields: [dataModelId], references: [id], onDelete: Cascade)
  dataRecordValues DataRecordValue[] @relation("AttributeValues")

  @@map("data_model_attributes")
}

model ExternalConnection {
  id        String   @id @default(uuid()) @db.Uuid
  spaceId   String   @map("space_id")
  name      String
  dbType    String   @map("db_type") // 'postgres' | 'mysql'
  host      String
  port      Int?
  database String?
  username  String
  password  String
  options   Json?
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  // Relations
  space       Space        @relation("SpaceExternalConnections", fields: [spaceId], references: [id], onDelete: Cascade)
  dataModels  DataModel[]  @relation("ExternalConnectionDataModels")

  @@map("external_connections")
}

model Team {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  description String?
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  // Relations
  members     TeamMember[]     @relation("TeamMembers")
  permissions TeamPermission[] @relation("TeamPermissions")

  @@map("teams")
}

model TeamMember {
  id     String @id @default(uuid()) @db.Uuid
  teamId String @map("team_id")
  userId String @map("user_id")
  role   String @default("member")

  // Relations
  team Team @relation("TeamMembers", fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation("UserTeamMembers", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@map("team_members")
}

model Permission {
  id          String @id @default(uuid()) @db.Uuid
  name        String @unique
  description String?
  resource    String
  action      String

  // Relations
  teamPermissions TeamPermission[] @relation("PermissionTeamPermissions")
  rolePermissions RolePermission[] @relation("PermissionRolePermissions")

  @@map("permissions")
}

model TeamPermission {
  id           String @id @default(uuid()) @db.Uuid
  teamId       String @map("team_id")
  permissionId String @map("permission_id")

  // Relations
  team       Team       @relation("TeamPermissions", fields: [teamId], references: [id], onDelete: Cascade)
  permission Permission @relation("PermissionTeamPermissions", fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([teamId, permissionId])
  @@map("team_permissions")
}

model Role {
  id          String @id @default(uuid()) @db.Uuid
  name        String @unique
  description String?

  // Relations
  permissions RolePermission[] @relation("RolePermissions")

  @@map("roles")
}

model RolePermission {
  id           String @id @default(uuid()) @db.Uuid
  roleId       String @map("role_id")
  permissionId String @map("permission_id")

  // Relations
  role       Role       @relation("RolePermissions", fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation("PermissionRolePermissions", fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

// Hardcoded models removed - now using EAV entities
// Company, Source, Industry, Event, Position, BusinessProfile, Title, CallWorkflowStatus
// are now managed as EAV entities with entity types: company, source, industry, event, position, business_profile, title, call_workflow_status

// Legacy DataRecord model for backward compatibility
model DataRecord {
  id        String   @id @default(uuid()) @db.Uuid
  dataModelId String @map("data_model_id")
  createdBy  String   @map("created_by") @db.Uuid
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")

  // Relations
  dataModel DataModel       @relation("DataModelRecords", fields: [dataModelId], references: [id], onDelete: Cascade)
  creator   User            @relation("DataRecordCreator", fields: [createdBy], references: [id])
  values    DataRecordValue[] @relation("RecordValues")

  @@map("data_records")
}

// Legacy DataRecordValue model for backward compatibility
model DataRecordValue {
  id        String @id @default(uuid()) @db.Uuid
  dataRecordId String @map("data_record_id")
  attributeId  String @map("attribute_id")
  value     String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  dataRecord DataRecord @relation("RecordValues", fields: [dataRecordId], references: [id], onDelete: Cascade)
  attribute  Attribute  @relation("AttributeValues", fields: [attributeId], references: [id], onDelete: Cascade)

  @@unique([dataRecordId, attributeId])
  @@map("data_record_values")
}

model Notification {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @map("user_id")
  type      String
  title     String
  message   String
  priority  String   @default("MEDIUM")
  status    String   @default("UNREAD")
  data      Json?
  actionUrl String?  @map("action_url")
  actionLabel String? @map("action_label")
  expiresAt DateTime? @map("expires_at")
  readAt    DateTime? @map("read_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model SystemSetting {
  id        String   @id @default(uuid()) @db.Uuid
  key       String   @unique
  value     String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("system_settings")
}

model SpaceAttachmentStorage {
  id        String   @id @default(uuid()) @db.Uuid
  spaceId   String   @map("space_id")
  fileName  String   @map("file_name")
  filePath  String   @map("file_path")
  fileSize  Int      @map("file_size")
  mimeType  String   @map("mime_type")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  space Space @relation("SpaceAttachments", fields: [spaceId], references: [id], onDelete: Cascade)

  @@map("space_attachment_storage")
}

model AttachmentFile {
  id        String   @id @default(uuid()) @db.Uuid
  fileName  String   @map("file_name")
  filePath  String   @map("file_path")
  fileSize  Int      @map("file_size")
  mimeType  String   @map("mime_type")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("attachment_files")
}

// Cache Management Models
model CacheInstance {
  id            String   @id @default(uuid()) @db.Uuid
  name          String
  type          String   // 'redis', 'memcached', 'memory', 'file'
  host          String
  port          Int
  password      String?
  isActive      Boolean  @default(true) @map("is_active")
  status        String   @default("disconnected") // 'connected', 'disconnected', 'error'
  lastConnected DateTime? @map("last_connected")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  keys          CacheKey[]
  stats         CacheStats[]

  @@map("cache_instances")
}

model CacheKey {
  id           String   @id @default(uuid()) @db.Uuid
  instanceId   String   @map("instance_id")
  key          String
  value        String
  type         String   @default("string")
  size         Int      @default(0)
  ttl          Int?     // Time to live in seconds
  hitCount     Int      @default(0) @map("hit_count")
  lastAccessed DateTime? @map("last_accessed")
  isExpired    Boolean  @default(false) @map("is_expired")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  instance     CacheInstance @relation(fields: [instanceId], references: [id], onDelete: Cascade)

  @@unique([instanceId, key])
  @@map("cache_keys")
}

model CacheStats {
  id              String   @id @default(uuid()) @db.Uuid
  instanceId      String   @map("instance_id")
  totalKeys       Int      @default(0) @map("total_keys")
  memoryUsage     BigInt   @default(0) @map("memory_usage")
  hitRate         Float    @default(0) @map("hit_rate")
  missRate        Float    @default(0) @map("miss_rate")
  evictionRate    Float    @default(0) @map("eviction_rate")
  avgResponseTime Float    @default(0) @map("avg_response_time")
  connections     Int      @default(0)
  commandsPerSecond Int    @default(0) @map("commands_per_second")
  hits            Int      @default(0)
  misses          Int      @default(0)
  evictions       Int      @default(0)
  expired         Int      @default(0)
  createdAt       DateTime @default(now()) @map("created_at")

  // Relations
  instance       CacheInstance @relation(fields: [instanceId], references: [id], onDelete: Cascade)

  @@map("cache_stats")
}

model CacheConfig {
  id            String   @id @default(uuid()) @db.Uuid
  instanceId    String   @map("instance_id")
  maxMemory     String   @map("max_memory")
  evictionPolicy String  @map("eviction_policy")
  ttl           Int      @default(3600)
  compression   Boolean  @default(false)
  persistence   Boolean  @default(false)
  clustering    Boolean  @default(false)
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  @@unique([instanceId])
  @@map("cache_configs")
}

model Notebook {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  description String?
  content     Json?     @default("{}")
  cells       Json?     @default("[]")
  tags        String[]  @default([])
  isPublic    Boolean   @default(false) @map("is_public")
  author      String
  spaceId     String?   @map("space_id") @db.Uuid
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  // Relations
  space Space? @relation("SpaceNotebooks", fields: [spaceId], references: [id], onDelete: Cascade)

  @@map("notebooks")
}

model AIProviderConfig {
  id            String   @id @default(uuid()) @db.Uuid
  provider      String   @unique
  name          String
  description   String?
  website       String?
  icon          String?
  isSupported   Boolean  @default(true) @map("is_supported")
  apiKey        String?  @map("api_key")
  baseUrl       String?  @map("base_url")
  customHeaders Json?    @default("{}") @map("custom_headers")
  timeout       Int      @default(30000)
  retryAttempts Int      @default(3) @map("retry_attempts")
  status        String   @default("inactive") // active, inactive, error, pending
  isConfigured  Boolean  @default(false) @map("is_configured")
  lastTested    DateTime? @map("last_tested")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  @@map("ai_provider_configs")
}

model AIModel {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  provider    String
  type        String   // text, image, code, multimodal
  description String?
  maxTokens   Int      @map("max_tokens")
  costPerToken Float   @map("cost_per_token")
  isAvailable Boolean  @default(true) @map("is_available")
  capabilities Json?   @default("[]")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  chatSessions ChatSession[] @relation("ModelChatSessions")

  @@map("ai_models")
}

model ChatSession {
  id          String   @id @default(uuid()) @db.Uuid
  title       String
  description String?
  isPrivate   Boolean  @default(false) @map("is_private")
  userId      String   @map("user_id") @db.Uuid
  spaceId     String?  @map("space_id") @db.Uuid
  modelId     String?  @map("model_id") @db.Uuid
  messages    Json?    @default("[]")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  // Relations
  user User @relation("UserChatSessions", fields: [userId], references: [id], onDelete: Cascade)
  space Space? @relation("SpaceChatSessions", fields: [spaceId], references: [id], onDelete: Cascade)
  model AIModel? @relation("ModelChatSessions", fields: [modelId], references: [id], onDelete: SetNull)

  @@map("chat_sessions")
}

model AuditLog {
  id         String   @id @default(uuid()) @db.Uuid
  action     String   // CREATE, UPDATE, DELETE, etc.
  entityType String   @map("entity_type") // attribute, data_model, etc.
  entityId   String   @map("entity_id") @db.Uuid
  oldValue   String?  @map("old_value") // JSON string
  newValue   String?  @map("new_value") // JSON string
  userId     String?  @map("user_id") @db.Uuid
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  user User? @relation("UserAuditLogs", fields: [userId], references: [id], onDelete: SetNull)

  @@map("audit_logs")
}