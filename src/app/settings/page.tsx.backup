'use client'

import { useEffect, useMemo, useState } from 'react'
import { MainLayout } from '@/components/layout/main-layout'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Combobox } from '@/components/ui/combobox'
import { Switch } from '@/components/ui/switch'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Dialog, DialogContent, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog'
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group'
import { 
  Settings as SettingsIcon,
  Users,
  Shield,
  Database,
  FileText,
  Upload,
  Download,
  Palette,
  Trash2,
  History,
  Edit,
  Building2,
  GitBranch,
  FolderTree,
  Calendar,
  Briefcase,
  UserCheck,
  X,
  Layout,
  Type,
  Image,
  ArrowUp,
  ArrowDown,
  Pin,
  PinOff,
  Plus,
  LayoutDashboard,
  GripVertical
} from 'lucide-react'
import { ColorPicker, ColorSwatch } from '@/components/ui/color-swatch'
import IconPicker from '@/components/ui/icon-picker'
import IconPickerPopover from '@/components/ui/icon-picker-popover'
import { AnimatedIcon } from '@/components/ui/animated-icon'
import { useSidebar } from '@/contexts/sidebar-context'
import { DragDropContext, Droppable, Draggable } from '@hello-pangea/dnd'
import { createPortal } from 'react-dom'
import { Z_INDEX } from '@/lib/z-index'
import * as LucideIcons from 'lucide-react'

function DynamicModelIcon({ name, className }: { name?: string, className?: string }) {
  if (!name) return (
    <span className="mr-2 inline-flex h-4 w-4 items-center justify-center rounded bg-black/10">?</span>
  )
  const AnyIcons = LucideIcons as unknown as Record<string, React.ComponentType<{ className?: string }>>
  const Icon = AnyIcons[name]
  if (!Icon) return (
    <span className="mr-2 inline-flex h-4 w-4 items-center justify-center rounded bg-black/10">?</span>
  )
  return <Icon className={className} />
}

export default function SettingsPage() {
  const [appName, setAppName] = useState('Customer Data Management')
  const [primaryColor, setPrimaryColor] = useState('#1e40af')
  const [secondaryColor, setSecondaryColor] = useState('#64748b')
  const [deletePolicyDays, setDeletePolicyDays] = useState(30)
  
  // Sidebar Configuration
  const { settings: sidebarSettings, updateSettings: updateSidebarSettings, resetSettings: resetSidebarSettings } = useSidebar()
  
  // Data Model Management State (loaded from API)
  const [dataModels, setDataModels] = useState<any[]>([])
  const [dataModelsLoading, setDataModelsLoading] = useState(false)
  const [dataModelsError, setDataModelsError] = useState<string | null>(null)
  const [showDataModelDialog, setShowDataModelDialog] = useState(false)
  const [showDataModelDrawer, setShowDataModelDrawer] = useState(false)
  const [editingDataModel, setEditingDataModel] = useState<any>(null)
  const [dataModelForm, setDataModelForm] = useState({ name: '', description: '', status: 'Active', icon: '' })
  
  // Attribute Management State
  const [showAttributeDialog, setShowAttributeDialog] = useState(false)
  const [showAttributeDetail, setShowAttributeDetail] = useState(false)
  
  const [editingAttribute, setEditingAttribute] = useState<any>(null)
  const [selectedDataModel, setSelectedDataModel] = useState<any>(null)
  const [attributeForm, setAttributeForm] = useState({
    name: '',
    display_name: '',
    data_type: 'text',
    description: '',
    is_required: false,
    is_unique: false,
    min_length: 0,
    max_length: 0,
    default_value: '',
    tooltip: '',
    validation_rules: '',
    options: [],
    order_index: 0,
    is_auto_increment: false,
    auto_increment_prefix: '',
    auto_increment_suffix: '',
    auto_increment_start: 1,
    auto_increment_padding: 3
  })
  const [attributeOptions, setAttributeOptions] = useState([{ value: '', label: '', color: '#3B82F6', order: 0 }])
  
  // Data Entity configuration state
  const [selectedDataModelForEntity, setSelectedDataModelForEntity] = useState('')
  const [selectedAttributeForEntity, setSelectedAttributeForEntity] = useState('')
  const [availableDataModels, setAvailableDataModels] = useState<any[]>([])
  const [availableAttributes, setAvailableAttributes] = useState<any[]>([])

  // Attributes state loaded from API
  const [attributes, setAttributes] = useState<any[]>([])
  const [attributesLoading, setAttributesLoading] = useState(false)
  const [attributesError, setAttributesError] = useState<string | null>(null)

  async function loadAttributes(dataModelId: string) {
    setAttributesLoading(true)
    setAttributesError(null)
    try {
      const res = await fetch(`/api/data-models/${dataModelId}/attributes`)
      if (!res.ok) {
        const err = await res.json().catch(() => ({}))
        throw new Error(err.error || 'Failed to load attributes')
      }
      const json = await res.json()
      setAttributes(json.attributes || [])
    } catch (e: any) {
      setAttributesError(e.message || 'Failed to load attributes')
    } finally {
      setAttributesLoading(false)
    }
  }

  // Load available data models for data entity configuration
  async function loadAvailableDataModels() {
    try {
      const res = await fetch('/api/data-models?page=1&limit=100')
      if (!res.ok) {
        const err = await res.json().catch(() => ({}))
        throw new Error(err.error || 'Failed to load data models')
      }
      const json = await res.json()
      setAvailableDataModels(json.dataModels || [])
    } catch (e: any) {
      console.error('Failed to load data models:', e)
    }
  }

  // Load attributes for selected data model in data entity configuration
  async function loadAvailableAttributes(dataModelId: string) {
    if (!dataModelId) {
      setAvailableAttributes([])
      return
    }
    try {
      const res = await fetch(`/api/data-models/${dataModelId}/attributes`)
      if (!res.ok) {
        const err = await res.json().catch(() => ({}))
        throw new Error(err.error || 'Failed to load attributes')
      }
      const json = await res.json()
      setAvailableAttributes(json.attributes || [])
    } catch (e: any) {
      console.error('Failed to load attributes:', e)
      setAvailableAttributes([])
    }
  }

  // Data Model Action Handlers
  const handleCreateDataModel = () => {
    setEditingDataModel(null)
    setDataModelForm({ name: '', description: '', status: 'Active', icon: '' })
    setSelectedDataModel(null)
    setShowDataModelDrawer(true)
  }

  const handleEditDataModel = (model: any) => {
    setEditingDataModel(model)
    setSelectedDataModel(model)
    setDataModelForm({ 
      name: model.name, 
      description: model.description || '', 
      status: model.status || 'Active',
      icon: model.icon || ''
    })
    setShowDataModelDrawer(true)
  }

  async function loadDataModels() {
    setDataModelsLoading(true)
    setDataModelsError(null)
    try {
      const res = await fetch('/api/data-models?page=1&limit=100')
      if (!res.ok) {
        const err = await res.json().catch(() => ({}))
        throw new Error(err.error || 'Failed to load data models')
      }
      const json = await res.json()
      setDataModels(json.dataModels || [])
    } catch (e: any) {
      setDataModelsError(e.message || 'Failed to load data models')
    } finally {
      setDataModelsLoading(false)
    }
  }

  useEffect(() => { loadDataModels() }, [])

  const handleSaveDataModel = async () => {
    if (!dataModelForm.name.trim()) return

    try {
    if (editingDataModel) {
        const res = await fetch(`/api/data-models/${editingDataModel.id}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ name: dataModelForm.name, description: dataModelForm.description, icon: dataModelForm.icon })
        })
        if (!res.ok) throw new Error('Update failed')
    } else {
        const res = await fetch('/api/data-models', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ name: dataModelForm.name, display_name: dataModelForm.name, description: dataModelForm.description, icon: dataModelForm.icon })
        })
        if (!res.ok) throw new Error('Create failed')
      }
      await loadDataModels()
    setShowDataModelDrawer(false)
    setEditingDataModel(null)
      setDataModelForm({ name: '', description: '', status: 'Active', icon: '' })
    } catch (e: any) {
      alert(e.message || 'Save failed')
    }
  }

  const handleDeleteDataModel = async (modelId: string) => {
    if (!confirm('Are you sure you want to delete this data model?')) return
    try {
      const res = await fetch(`/api/data-models/${modelId}`, { method: 'DELETE' })
      if (!res.ok) throw new Error('Delete failed')
      await loadDataModels()
    } catch (e: any) {
      alert(e.message || 'Delete failed')
    }
  }

  const handleDragEnd = async (result: any) => {
    if (!result.destination) return

    const sourceIndex = result.source.index
    const destinationIndex = result.destination.index

    if (sourceIndex === destinationIndex) return

    try {
      // Update sort orders for affected models
      const newModels = Array.from(dataModels)
      const [reorderedItem] = newModels.splice(sourceIndex, 1)
      newModels.splice(destinationIndex, 0, reorderedItem)

      // Update sort orders
      const updates = newModels.map((model, index) => ({
        id: model.id,
        sort_order: index * 100 // Use increments of 100 for easier reordering
      }))

      // Batch update all affected models
      await Promise.all(updates.map(update => 
        fetch(`/api/data-models/${update.id}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ sort_order: update.sort_order })
        })
      ))

      await loadDataModels()
    } catch (e: any) {
      alert(e.message || 'Sort failed')
    }
  }

  const handleTogglePin = async (modelId: string) => {
    try {
      const model = dataModels.find(m => m.id === modelId)
      if (!model) return
      
      const res = await fetch(`/api/data-models/${modelId}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ is_pinned: !model.is_pinned })
      })
      if (!res.ok) throw new Error('Pin toggle failed')
      await loadDataModels()
    } catch (e: any) {
      alert(e.message || 'Pin toggle failed')
    }
  }


  // Attribute Management Handlers
  const handleManageAttributes = (model: any) => {
    setSelectedDataModel(model)
    setShowAttributeDialog(true)
    if (model?.id) {
      loadAttributes(model.id)
    }
  }

  const handleCreateAttribute = () => {
    setEditingAttribute(null)
    setAttributeForm({
      name: 'id', // Primary key as attribute_code
      display_name: '',
      data_type: 'text',
      description: '',
      is_required: false,
      is_unique: false,
      min_length: 0,
      max_length: 0,
      default_value: '',
      tooltip: '',
      validation_rules: '',
      options: [],
      order_index: 0,
      is_auto_increment: false,
      auto_increment_prefix: '',
      auto_increment_suffix: '',
      auto_increment_start: 1,
      auto_increment_padding: 3
    })
    setAttributeOptions([{ value: '', label: '', color: '#3B82F6', order: 0 }])
    setSelectedDataModelForEntity('')
    setSelectedAttributeForEntity('')
    loadAvailableDataModels() // Load data models for data entity configuration
    setShowAttributeDetail(true)
  }

  const handleEditAttribute = (attribute: any) => {
    setEditingAttribute(attribute)
    setAttributeForm({
      name: attribute.name,
      display_name: attribute.display_name,
      data_type: attribute.data_type,
      description: attribute.description || '',
      is_required: attribute.is_required,
      is_unique: attribute.is_unique,
      min_length: attribute.min_length || 0,
      max_length: attribute.max_length || 0,
      default_value: attribute.default_value || '',
      tooltip: attribute.tooltip || '',
      validation_rules: attribute.validation_rules || '',
      options: attribute.options || [],
      order_index: attribute.order_index || 0,
      is_auto_increment: attribute.is_auto_increment || false,
      auto_increment_prefix: attribute.auto_increment_prefix || '',
      auto_increment_suffix: attribute.auto_increment_suffix || '',
      auto_increment_start: attribute.auto_increment_start || 1,
      auto_increment_padding: attribute.auto_increment_padding || 3
    })
    setAttributeOptions(attribute.options?.length > 0 ? attribute.options : [{ value: '', label: '', color: '#3B82F6', order: 0 }])
    // Load options from API if attribute has an ID
    if (attribute.id) {
      loadAttributeOptions(attribute.id)
    }
    setShowAttributeDetail(true)
  }

  const handleSaveAttribute = async () => {
    if (!attributeForm.name.trim()) return

    const attributeData = {
      ...attributeForm,
      options: attributeOptions.filter(opt => opt.value.trim() && opt.label.trim()).map((opt, index) => ({ ...opt, order: index })),
      // Include data entity configuration if type is data_entity
      ...(attributeForm.data_type === 'data_entity' && {
        data_entity_model_id: selectedDataModelForEntity,
        data_entity_attribute_id: selectedAttributeForEntity
      })
    }

    try {
      if (!selectedDataModel?.id) throw new Error('No data model selected')
      if (editingAttribute) {
        // TODO: implement update endpoint
        throw new Error('Update attribute not implemented yet')
      } else {
        const res = await fetch(`/api/data-models/${selectedDataModel.id}/attributes`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(attributeData)
        })
        if (!res.ok) {
          const err = await res.json().catch(() => ({}))
          throw new Error(err.error || 'Failed to create attribute')
        }
        
        const result = await res.json()
        const newAttribute = result.attribute
        
        // Save attribute options if we have valid options
        if (newAttribute?.id && attributeData.options?.length > 0) {
          try {
            const optionsRes = await fetch(`/api/data-models/${selectedDataModel.id}/attributes/${newAttribute.id}/options`, {
              method: 'PUT',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ options: attributeData.options })
            })
            if (!optionsRes.ok) {
              console.error('Failed to save attribute options')
            }
          } catch (error) {
            console.error('Error saving attribute options:', error)
          }
        }
      }
      await loadAttributes(selectedDataModel.id)
      
      setShowAttributeDetail(false)
      setEditingAttribute(null)
      setAttributeForm({
        name: '',
        display_name: '',
        data_type: 'text',
        description: '',
        is_required: false,
        is_unique: false,
        min_length: 0,
        max_length: 0,
        default_value: '',
        tooltip: '',
        validation_rules: '',
        options: [],
        order_index: 0,
        is_auto_increment: false,
        auto_increment_prefix: '',
        auto_increment_suffix: '',
        auto_increment_start: 1,
        auto_increment_padding: 3
      })
      setAttributeOptions([{ value: '', label: '', color: '#3B82F6', order: 0 }])
    } catch (e: any) {
      alert(e.message || 'Save attribute failed')
    }
  }

  const handleDeleteAttribute = (attributeId: string) => {
    if (confirm('Are you sure you want to delete this attribute?')) {
      console.log('Deleting attribute:', attributeId)
    }
  }

  const addAttributeOption = () => {
    setAttributeOptions(prev => [...prev, { value: '', label: '', color: '#3B82F6', order: prev.length }])
  }

  const removeAttributeOption = (index: number) => {
    setAttributeOptions(prev => prev.filter((_, i) => i !== index))
  }

  const updateAttributeOption = (index: number, field: 'value' | 'label' | 'color', value: string) => {
    setAttributeOptions(prev => prev.map((opt, i) => 
      i === index ? { ...opt, [field]: value } : opt
    ))
  }

  const handleAttributeOptionsDragEnd = (result: any) => {
    if (!result.destination) return

    const items = Array.from(attributeOptions)
    const [reorderedItem] = items.splice(result.source.index, 1)
    items.splice(result.destination.index, 0, reorderedItem)

    // Update order indices
    const updatedItems = items.map((item, index) => ({ ...item, order: index }))
    setAttributeOptions(updatedItems)
  }

  // Load attribute options from API
  const loadAttributeOptions = async (attributeId: string) => {
    try {
      const res = await fetch(`/api/data-models/${selectedDataModel?.id}/attributes/${attributeId}/options`)
      if (!res.ok) {
        const err = await res.json().catch(() => ({}))
        throw new Error(err.error || 'Failed to load options')
      }
      const json = await res.json()
      setAttributeOptions(json.options || [{ value: '', label: '', color: '#3B82F6', order: 0 }])
    } catch (e: any) {
      console.error('Failed to load attribute options:', e)
    }
  }

  // Save attribute options to API
  const saveAttributeOptions = async (attributeId: string) => {
    try {
      const validOptions = attributeOptions.filter(opt => opt.value.trim() && opt.label.trim())
      const res = await fetch(`/api/data-models/${selectedDataModel?.id}/attributes/${attributeId}/options`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ options: validOptions })
      })
      if (!res.ok) {
        const err = await res.json().catch(() => ({}))
        throw new Error(err.error || 'Failed to save options')
      }
    } catch (e: any) {
      console.error('Failed to save attribute options:', e)
    }
  }

  return (
    <MainLayout>
      <Tabs defaultValue="system" orientation="vertical" className="flex h-full">
        {/* Left Sidebar */}
        <div className="w-64 bg-card border-r flex flex-col">
          <div className="p-6 border-b">
            <h1 className="text-xl font-bold">Settings</h1>
            <p className="text-sm text-muted-foreground mt-1">
              Configure your system
            </p>
          </div>
          
          <nav className="flex-1 p-4 space-y-1">
            <TabsList className="w-full flex-col h-auto bg-transparent">
              <TabsTrigger className="justify-start w-full" value="system">System</TabsTrigger>
              <TabsTrigger className="justify-start w-full" value="preferences">Preferences</TabsTrigger>
              <TabsTrigger className="justify-start w-full" value="sidebar">Sidebar</TabsTrigger>
              <TabsTrigger className="justify-start w-full" value="data-model">Data Model</TabsTrigger>
              <TabsTrigger className="justify-start w-full" value="api-docs">API Docs</TabsTrigger>
              <TabsTrigger className="justify-start w-full" value="restore">Restore</TabsTrigger>
              <TabsTrigger className="justify-start w-full" value="users">Users</TabsTrigger>
            </TabsList>
          </nav>
        </div>

        {/* Main Content Area */}
        <div className="flex-1 overflow-y-auto">
          <div className="p-6">
            <div className="space-y-6">
            {/* System Settings */}
            <TabsContent value="system" className="space-y-6 w-full">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center space-x-2">
                    <SettingsIcon className="h-5 w-5" />
                    <span>System Settings</span>
                  </CardTitle>
                  <CardDescription>
                    Configure system-wide settings and policies
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-6">
                  <div className="space-y-2">
                    <Label htmlFor="delete-policy">Delete Policy (Days)</Label>
                    <Input
                      id="delete-policy"
                      type="number"
                      value={deletePolicyDays}
                      onChange={(e) => setDeletePolicyDays(Number(e.target.value))}
                      placeholder="30"
                    />
                    <p className="text-sm text-muted-foreground">
                      Number of days to keep deleted data before permanent removal
                    </p>
                  </div>

                  <div className="flex items-center justify-between">
                    <div className="space-y-0.5">
                      <Label>Enable Audit Trail</Label>
                      <p className="text-sm text-muted-foreground">
                        Track all system activities and changes
                      </p>
                    </div>
                    <Switch defaultChecked />
                  </div>

                  <div className="flex items-center justify-between">
                    <div className="space-y-0.5">
                      <Label>Enable Real-time Updates</Label>
                      <p className="text-sm text-muted-foreground">
                        Enable Server-Sent Events for real-time data updates
                      </p>
                    </div>
                    <Switch defaultChecked />
                  </div>
                </CardContent>
              </Card>
            </TabsContent>

            {/* System Preferences */}
            <TabsContent value="preferences" className="space-y-6 w-full">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center space-x-2">
                    <Palette className="h-5 w-5" />
                    <span>System Preferences</span>
                  </CardTitle>
                  <CardDescription>
                    Customize the appearance and branding of your application
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-6">
                  <div className="space-y-2">
                    <Label htmlFor="app-name">Application Name</Label>
                    <Input
                      id="app-name"
                      value={appName}
                      onChange={(e) => setAppName(e.target.value)}
                      placeholder="Customer Data Management"
                    />
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="app-logo">Application Logo</Label>
                    <div className="flex items-center space-x-4">
                      <Input
                        id="app-logo"
                        type="file"
                        accept="image/*"
                        className="flex-1"
                      />
                      <Button variant="outline" size="sm">
                        <Upload className="mr-2 h-4 w-4" />
                        Upload
                      </Button>
                    </div>
                  </div>

                  <div className="grid grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <Label htmlFor="primary-color">Primary Color</Label>
                      <div className="flex items-center space-x-2">
                        <Input
                          id="primary-color"
                          type="color"
                          value={primaryColor}
                          onChange={(e) => setPrimaryColor(e.target.value)}
                          className="w-16 h-10 p-1"
                        />
                        <Input
                          value={primaryColor}
                          onChange={(e) => setPrimaryColor(e.target.value)}
                          placeholder="#1e40af"
                        />
                      </div>
                    </div>

                    <div className="space-y-2">
                      <Label htmlFor="secondary-color">Secondary Color</Label>
                      <div className="flex items-center space-x-2">
                        <Input
                          id="secondary-color"
                          type="color"
                          value={secondaryColor}
                          onChange={(e) => setSecondaryColor(e.target.value)}
                          className="w-16 h-10 p-1"
                        />
                        <Input
                          value={secondaryColor}
                          onChange={(e) => setSecondaryColor(e.target.value)}
                          placeholder="#64748b"
                        />
                      </div>
                    </div>
                  </div>

                  
                </CardContent>
              </Card>
            </TabsContent>

            {/* Sidebar Configuration */}
            <TabsContent value="sidebar" className="space-y-6 w-full">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center space-x-2">
                    <Layout className="h-5 w-5" />
                    <span>Sidebar Configuration</span>
                  </CardTitle>
                  <CardDescription>
                    Customize the appearance and behavior of the sidebar
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-6">
                  {/* Sidebar Size */}
                  <div className="space-y-2">
                    <Label>Sidebar Size</Label>
                    <div className="flex space-x-2">
                      <Button
                        variant={sidebarSettings.size === 'small' ? 'default' : 'outline'}
                        size="sm"
                        onClick={() => updateSidebarSettings({ size: 'small' })}
                      >
                        Small (200px)
                      </Button>
                      <Button
                        variant={sidebarSettings.size === 'medium' ? 'default' : 'outline'}
                        size="sm"
                        onClick={() => updateSidebarSettings({ size: 'medium' })}
                      >
                        Medium (256px)
                      </Button>
                      <Button
                        variant={sidebarSettings.size === 'large' ? 'default' : 'outline'}
                        size="sm"
                        onClick={() => updateSidebarSettings({ size: 'large' })}
                      >
                        Large (320px)
                      </Button>
                    </div>
                    </div>

                  {/* Background Type */}
                  <div className="space-y-2">
                    <Label>Background Type</Label>
                    <RadioGroup value={sidebarSettings.backgroundType} onValueChange={(value: string) => updateSidebarSettings({ backgroundType: value as 'color' | 'image' })} className="flex gap-4">
                      <div className="flex items-center space-x-2">
                        <RadioGroupItem value="color" id="color" />
                        <label htmlFor="color" className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 flex items-center space-x-2">
                          <Palette className="h-4 w-4" />
                          <span>Color</span>
                        </label>
                      </div>
                      <div className="flex items-center space-x-2">
                        <RadioGroupItem value="image" id="image" />
                        <label htmlFor="image" className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 flex items-center space-x-2">
                          <Image className="h-4 w-4" />
                          <span>Image</span>
                        </label>
                      </div>
                    </RadioGroup>
                  </div>

                  {/* Background Color */}
                  {sidebarSettings.backgroundType === 'color' && (
                    <ColorPicker
                      label="Background Color"
                      value={sidebarSettings.backgroundColor}
                      onChange={(color) => updateSidebarSettings({ backgroundColor: color })}
                    />
                  )}

                  {/* Background Image */}
                  {sidebarSettings.backgroundType === 'image' && (
                    <div className="space-y-2">
                      <Label>Background Image</Label>
                      <div className="flex items-center space-x-4">
                        <Input
                          type="file"
                          accept="image/*"
                          onChange={(e) => {
                            const file = e.target.files?.[0]
                            if (file) {
                              const reader = new FileReader()
                              reader.onload = (e) => {
                                updateSidebarSettings({ backgroundImage: e.target?.result as string })
                              }
                              reader.readAsDataURL(file)
                            }
                          }}
                          className="flex-1"
                        />
                        <Button variant="outline" size="sm">
                          <Upload className="mr-2 h-4 w-4" />
                          Upload
                        </Button>
                      </div>
                      {sidebarSettings.backgroundImage && (
                        <div className="mt-2">
                          <img
                            src={sidebarSettings.backgroundImage}
                            alt="Sidebar background preview"
                            className="w-32 h-20 object-cover rounded border"
                          />
                        </div>
                      )}
                    </div>
                  )}

                  {/* Font Color */}
                  <ColorPicker
                    label="Font Color"
                    value={sidebarSettings.fontColor}
                    onChange={(color) => updateSidebarSettings({ fontColor: color })}
                  />

                  

                  {/* Save Settings */}
                  <div className="flex justify-end space-x-2">
                    <Button variant="outline" onClick={resetSidebarSettings}>Reset to Default</Button>
                    <Button onClick={() => {
                      // Settings are automatically saved via context
                      alert('Sidebar settings saved!')
                    }}>Save Sidebar Settings</Button>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>

            {/* Data Model */}
            <TabsContent value="data-model" className="space-y-6 w-full">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center space-x-2">
                    <Database className="h-5 w-5" />
                    <span>Data Model Management</span>
                  </CardTitle>
                  <CardDescription>
                    Create, update, and manage data models and their attributes
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <DragDropContext onDragEnd={handleDragEnd}>
                    <div className="border rounded-lg overflow-hidden">
                      <table className="w-full text-sm">
                        <thead className="bg-muted/50">
                          <tr>
                            <th className="text-left p-3">Data Model</th>
                            <th className="text-left p-3">Records</th>
                            <th className="text-left p-3">Status</th>
                              <th className="text-center p-3">Pin</th>
                            <th className="text-right p-3">Actions</th>
                          </tr>
                        </thead>
                          <Droppable droppableId="data-models">
                            {(provided) => (
                              <tbody ref={provided.innerRef} {...provided.droppableProps}>
                          {dataModels.map((model, index) => (
                                  <Draggable key={model.id} draggableId={model.id} index={index}>
                                    {(provided, snapshot) => (
                                      <tr 
                                        ref={provided.innerRef}
                                        {...provided.draggableProps}
                                        className={`border-t hover:bg-muted/50 cursor-pointer ${snapshot.isDragging ? 'bg-blue-50' : ''}`}
                                      >
                              <td className="p-3">
                                <div className="flex items-center space-x-3">
                                            <div 
                                              {...provided.dragHandleProps}
                                              className="cursor-grab active:cursor-grabbing p-1 hover:bg-gray-100 rounded"
                                              title="Drag to reorder"
                                            >
                                              <svg className="w-4 h-4 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                                                <path d="M7 2a2 2 0 1 0 0 4 2 2 0 0 0 0-4zM7 8a2 2 0 1 0 0 4 2 2 0 0 0 0-4zM7 14a2 2 0 1 0 0 4 2 2 0 0 0 0-4zM13 2a2 2 0 1 0 0 4 2 2 0 0 0 0-4zM13 8a2 2 0 1 0 0 4 2 2 0 0 0 0-4zM13 14a2 2 0 1 0 0 4 2 2 0 0 0 0-4z"/>
                                              </svg>
                                            </div>
                                            <DynamicModelIcon name={model.icon} className="mr-2 h-4 w-4" />
                                            <span className="font-medium">{model.display_name || model.name}</span>
                                </div>
                              </td>
                              <td className="p-3">
                                          <span className="text-muted-foreground">{model.count?.toLocaleString?.() || 0} records</span>
                              </td>
                              <td className="p-3">
                                <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs ${
                                  model.status === 'Active' 
                                    ? 'bg-green-100 text-green-800' 
                                    : 'bg-red-100 text-red-800'
                                }`}>
                                  {model.status}
                                </span>
                              </td>
                                        <td className="p-3 text-center">
                                  <Button 
                                    variant="ghost" 
                                    size="sm"
                                            onClick={(e) => { e.stopPropagation(); handleTogglePin(model.id); }}
                                            title={model.is_pinned ? "Unpin from Sidebar" : "Pin to Sidebar"}
                                            className={model.is_pinned ? "text-blue-600" : "text-gray-400"}
                                          >
                                            {model.is_pinned ? <Pin className="h-4 w-4" /> : <PinOff className="h-4 w-4" />}
                                  </Button>
                                        </td>
                                        <td className="p-3">
                                          <div className="flex justify-end space-x-2">
                                  <Button 
                                    variant="ghost" 
                                    size="sm"
                                              onClick={(e) => { e.stopPropagation(); handleEditDataModel(model); }}
                                    title="Edit Data Model"
                                  >
                                    <Edit className="h-4 w-4" />
                                  </Button>
                                  <Button 
                                    variant="ghost" 
                                    size="sm"
                                              onClick={(e) => { e.stopPropagation(); handleDeleteDataModel(model.id); }}
                                    title="Delete Data Model"
                                    className="text-red-600 hover:text-red-700"
                                  >
                                    <Trash2 className="h-4 w-4" />
                                  </Button>
                                </div>
                              </td>
                            </tr>
                                    )}
                                  </Draggable>
                          ))}
                                {provided.placeholder}
                        </tbody>
                            )}
                          </Droppable>
                      </table>
                    </div>
                    </DragDropContext>
                    
                    <Button className="w-full" onClick={handleCreateDataModel}>
                      <Plus className="mr-2 h-4 w-4" />
                      Create New Data Model
                    </Button>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>

            {/* API Documentation */}
            <TabsContent value="api-docs" className="space-y-6 w-full">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center space-x-2">
                    <FileText className="h-5 w-5" />
                    <span>Swagger API Documentation</span>
                  </CardTitle>
                  <CardDescription>
                    Access the complete API documentation
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <p className="text-sm text-muted-foreground">
                      The Swagger API documentation provides comprehensive information about all available endpoints,
                      request/response schemas, and authentication methods.
                    </p>
                    <Button onClick={() => window.open('/api-docs', '_blank')}>
                      <FileText className="mr-2 h-4 w-4" />
                      Open API Documentation
                    </Button>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>

            {/* Restore Data */}
            <TabsContent value="restore" className="space-y-6 w-full">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center space-x-2">
                    <Trash2 className="h-5 w-5" />
                    <span>Restore Data</span>
                  </CardTitle>
                  <CardDescription>
                    Restore deleted data within the retention period
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <p className="text-sm text-muted-foreground">
                      All deleted data is kept for {deletePolicyDays} days before permanent removal.
                      You can restore any data that hasn't exceeded this retention period.
                    </p>
                    
                    <div className="space-y-2">
                      <Label>Deleted Records</Label>
                      <div className="border rounded-lg p-4">
                        <p className="text-sm text-muted-foreground">No deleted records found</p>
                      </div>
                    </div>
                    
                    <Button variant="outline">
                      <Download className="mr-2 h-4 w-4" />
                      View All Deleted Records
                    </Button>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>

            {/* User Management */}
            <TabsContent value="users" className="space-y-6 w-full">
              <Tabs defaultValue="user-management" className="w-full">
                <TabsList className="grid w-full grid-cols-2">
                  <TabsTrigger value="user-management">User Management</TabsTrigger>
                  <TabsTrigger value="roles-permissions">Roles & Permissions</TabsTrigger>
                </TabsList>
                
                <TabsContent value="user-management" className="space-y-6">
                  <Card>
                    <CardHeader>
                      <CardTitle className="flex items-center space-x-2">
                        <Users className="h-5 w-5" />
                        <span>User Management</span>
                      </CardTitle>
                      <CardDescription>
                        Manage users, teams, roles, and permissions
                      </CardDescription>
                    </CardHeader>
                    <CardContent>
                      <UsersSection />
                    </CardContent>
                  </Card>
                </TabsContent>
                
                <TabsContent value="roles-permissions" className="space-y-6">
                  <Card>
                    <CardHeader>
                      <CardTitle className="flex items-center space-x-2">
                        <Shield className="h-5 w-5" />
                        <span>Roles & Permissions</span>
                      </CardTitle>
                      <CardDescription>
                        Create roles and assign permissions
                      </CardDescription>
                    </CardHeader>
                    <CardContent>
                      <RolesSection />
                    </CardContent>
                  </Card>
                </TabsContent>
              </Tabs>
            </TabsContent>
            </div>
          </div>
        </div>
      </Tabs>

      {/* Data Model Drawer */}
      {showDataModelDrawer && (
        <div className="fixed inset-0 z-50">
          <div className="fixed inset-0 bg-black/50" onClick={() => setShowDataModelDrawer(false)} style={{ zIndex: Z_INDEX.overlay }} />
          <div className="fixed right-0 top-0 h-screen w-[960px] bg-white shadow-2xl flex flex-col" style={{ zIndex: Z_INDEX.drawer }}>
            <div className="flex items-center justify-between border-b p-4">
              <h2 className="text-lg font-semibold">{editingDataModel ? 'Edit Data Model' : 'Create New Data Model'}</h2>
              <Button variant="ghost" size="sm" onClick={() => setShowDataModelDrawer(false)}>
                <X className="h-4 w-4" />
              </Button>
            </div>
            <div className="flex-1 overflow-hidden">
              <Tabs defaultValue="model" className="h-full flex flex-col">
                <TabsList className="flex justify-start w-full p-4 gap-0">
                  <TabsTrigger value="model" className="flex items-center gap-2 px-6 py-3">
                    <Database className="h-4 w-4" />
                    Model detail
                  </TabsTrigger>
                  <TabsTrigger value="attributes" className="flex items-center gap-2 px-6 py-3">
                    <Type className="h-4 w-4" />
                    Attribute list
                  </TabsTrigger>
                  <TabsTrigger value="options" disabled={!(attributeForm.data_type === 'select' || attributeForm.data_type === 'multiselect')} className="flex items-center gap-2 px-6 py-3">
                    <SettingsIcon className="h-4 w-4" />
                    Attribute options
                  </TabsTrigger>
                </TabsList>
                <TabsContent value="model" className="flex-1 overflow-auto p-4 space-y-4">
            <div className="space-y-2">
              <Label htmlFor="data-model-name">Name</Label>
              <Input
                id="data-model-name"
                value={dataModelForm.name}
                onChange={(e) => setDataModelForm({ ...dataModelForm, name: e.target.value })}
                placeholder="Enter data model name"
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="data-model-description">Description</Label>
              <Input
                id="data-model-description"
                value={dataModelForm.description}
                onChange={(e) => setDataModelForm({ ...dataModelForm, description: e.target.value })}
                placeholder="Enter description (optional)"
              />
            </div>
                  <div className="space-y-2">
                    <Label htmlFor="data-model-icon">Icon</Label>
                    <IconPickerPopover
                      value={dataModelForm.icon}
                      onChange={(name) => setDataModelForm({ ...dataModelForm, icon: name })}
                    />
                  </div>
            <div className="space-y-2">
              <Label htmlFor="data-model-status">Status</Label>
              <Select
                value={dataModelForm.status}
                onValueChange={(value) => setDataModelForm({ ...dataModelForm, status: value })}
              >
                <SelectTrigger className="w-full">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="Active">Active</SelectItem>
                  <SelectItem value="Inactive">Inactive</SelectItem>
                </SelectContent>
              </Select>
            </div>
                </TabsContent>
                <TabsContent value="attributes" className="flex-1 overflow-auto p-4">
                  {/* Reuse existing Manage Attributes table for selectedDataModel */}
                  <div className="border rounded-lg">
                    <div className="p-4 border-b bg-muted/50 flex items-center justify-between">
                      <h3 className="font-medium">Attributes</h3>
                      <Button onClick={handleCreateAttribute} size="sm">
                        <Plus className="mr-2 h-4 w-4" />
                        Add Attribute
                      </Button>
          </div>
                    <div className="p-4">
                      <table className="w-full text-sm">
                        <thead className="bg-muted/50">
                          <tr>
                            <th className="text-left p-3">Display Name</th>
                            <th className="text-left p-3">Key</th>
                            <th className="text-left p-3">Type</th>
                            <th className="text-left p-3">Required</th>
                            <th className="text-left p-3">Unique</th>
                            <th className="text-right p-3">Actions</th>
                          </tr>
                        </thead>
                        <tbody>
                          {attributesLoading ? (
                            <tr><td className="p-3" colSpan={6}>Loading...</td></tr>
                          ) : attributesError ? (
                            <tr><td className="p-3 text-red-600" colSpan={6}>{attributesError}</td></tr>
                          ) : (attributes || []).length === 0 ? (
                            <tr><td className="p-3" colSpan={6}>No attributes found</td></tr>
                          ) : attributes.map((attr) => (
                            <tr 
                              key={attr.id} 
                              className="border-t hover:bg-muted/50 cursor-pointer"
                              onClick={() => handleEditAttribute(attr)}
                            >
                              <td className="p-3 font-medium">{attr.display_name}</td>
                              <td className="p-3 text-muted-foreground">{attr.name}</td>
                              <td className="p-3">
                                <span className={`px-2 py-1 rounded-full text-xs ${
                                  attr.data_type === 'text' ? 'bg-blue-100 text-blue-800' :
                                  attr.data_type === 'email' ? 'bg-green-100 text-green-800' :
                                  attr.data_type === 'select' ? 'bg-purple-100 text-purple-800' :
                                  'bg-gray-100 text-gray-800'
                                }`}>
                                  {attr.data_type}
                                </span>
                              </td>
                              <td className="p-3">{attr.is_required ? 'Yes' : 'No'}</td>
                              <td className="p-3">{attr.is_unique ? 'Yes' : 'No'}</td>
                              <td className="p-3 text-right" onClick={(e) => e.stopPropagation()}>
                                <div className="flex items-center justify-end space-x-1">
                                  <Button 
                                    variant="ghost" 
                                    size="sm"
                                    onClick={() => handleEditAttribute(attr)}
                                    title="Edit Attribute"
                                  >
                                    <Edit className="h-4 w-4" />
                                    <span className="ml-1">Edit</span>
            </Button>
                                  <Button 
                                    variant="ghost" 
                                    size="sm"
                                    onClick={() => handleDeleteAttribute(attr.id)}
                                    title="Delete Attribute"
                                    className="text-red-600 hover:text-red-700"
                                  >
                                    <Trash2 className="h-4 w-4" />
                                    <span className="ml-1">Delete</span>
            </Button>
                                </div>
                              </td>
                            </tr>
                          ))}
                        </tbody>
                      </table>
                    </div>
                  </div>
                </TabsContent>
                <TabsContent value="options" className="flex-1 overflow-auto p-4">
                  {/* Reuse existing options UI bound to attributeForm/options */}
                  <div className="space-y-4">
                    <div className="text-sm text-muted-foreground">Manage options for select-type attributes.</div>
                    {/* Existing options editor below */}
                    {/* options grid from attribute detail drawer is reused here */}
                    {/* START options editor */}
                    <div className="space-y-3">
                      {attributeOptions.map((option, index) => (
                        <div key={index} className="grid grid-cols-5 gap-2 items-center">
                          <Input
                            value={option.value}
                            onChange={(e) => {
                              const next = [...attributeOptions]
                              next[index] = { ...next[index], value: e.target.value }
                              setAttributeOptions(next)
                            }}
                            placeholder="Value"
                          />
                          <Input
                            className="col-span-3"
                            value={option.label}
                            onChange={(e) => {
                              const next = [...attributeOptions]
                              next[index] = { ...next[index], label: e.target.value }
                              setAttributeOptions(next)
                            }}
                            placeholder="Label"
                          />
                          <Button variant="ghost" className="text-red-600" onClick={() => {
                            const next = attributeOptions.filter((_, i) => i !== index)
                            setAttributeOptions(next.length ? next.map(opt => ({ ...opt, color: opt.color || '#3B82F6', order: opt.order || 0 })) : [{ value: '', label: '', color: '#3B82F6', order: 0 }])
                          }}>Remove</Button>
                        </div>
                      ))}
                      <Button variant="secondary" onClick={() => setAttributeOptions([...attributeOptions.map(opt => ({ ...opt, color: opt.color || '#3B82F6', order: opt.order || 0 })), { value: '', label: '', color: '#3B82F6', order: attributeOptions.length }])}>Add Option</Button>
                    </div>
                    {/* END options editor */}
                  </div>
                </TabsContent>
              </Tabs>
            </div>
            <div className="border-t p-4 flex items-center justify-end gap-2">
              <Button variant="outline" onClick={() => setShowDataModelDrawer(false)}>Cancel</Button>
              <Button onClick={handleSaveDataModel}>{editingDataModel ? 'Save Changes' : 'Create Data Model'}</Button>
            </div>
          </div>
        </div>
      )}

      {/* Attribute Management Drawer */}
      {showAttributeDialog && (
        <div className="fixed inset-0 z-50">
          {/* Backdrop */}
          <div 
            className="fixed inset-0 bg-black/50" 
            onClick={() => setShowAttributeDialog(false)}
          />
          
          {/* Drawer */}
          <div className="fixed right-0 top-0 h-screen w-[800px] flex flex-col bg-white shadow-xl">
            <div className="flex items-center justify-between border-b p-4">
              <h2 className="text-lg font-semibold">Manage Attributes - {selectedDataModel?.name}</h2>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setShowAttributeDialog(false)}
              >
                <X className="h-4 w-4" />
              </Button>
            </div>
            <div className="flex-1 overflow-y-auto p-4">
              <div className="space-y-6">
                {/* Attributes List */}
                <div className="border rounded-lg">
                  <div className="p-4 border-b bg-muted/50">
                    <div className="flex items-center justify-between">
                      <h3 className="font-medium">Attributes</h3>
                      <Button onClick={handleCreateAttribute} size="sm">
                        <Plus className="mr-2 h-4 w-4" />
                        Add Attribute
                      </Button>
                    </div>
                  </div>
                  <div className="p-4">
                  {/* Sample attributes - in real app, this would be fetched from API */}
                    <table className="w-full text-sm">
                      <thead className="bg-muted/50">
                        <tr>
                          <th className="text-left p-3">Display Name</th>
                          <th className="text-left p-3">Key</th>
                          <th className="text-left p-3">Type</th>
                          <th className="text-left p-3">Required</th>
                          <th className="text-left p-3">Unique</th>
                          <th className="text-right p-3">Actions</th>
                        </tr>
                      </thead>
                      <tbody>
                        {attributesLoading ? (
                          <tr><td className="p-3" colSpan={6}>Loading...</td></tr>
                        ) : attributesError ? (
                          <tr><td className="p-3 text-red-600" colSpan={6}>{attributesError}</td></tr>
                        ) : (attributes || []).length === 0 ? (
                          <tr><td className="p-3" colSpan={6}>No attributes found</td></tr>
                        ) : attributes.map((attr) => (
                          <tr 
                            key={attr.id} 
                            className="border-t hover:bg-muted/50 cursor-pointer"
                            onClick={() => handleEditAttribute(attr)}
                          >
                            <td className="p-3 font-medium">{attr.display_name}</td>
                            <td className="p-3 text-muted-foreground">{attr.name}</td>
                            <td className="p-3">
                          <span className={`px-2 py-1 rounded-full text-xs ${
                            attr.data_type === 'text' ? 'bg-blue-100 text-blue-800' :
                            attr.data_type === 'email' ? 'bg-green-100 text-green-800' :
                            attr.data_type === 'select' ? 'bg-purple-100 text-purple-800' :
                            'bg-gray-100 text-gray-800'
                          }`}>
                            {attr.data_type}
                          </span>
                            </td>
                            <td className="p-3">{attr.is_required ? 'Yes' : 'No'}</td>
                            <td className="p-3">{attr.is_unique ? 'Yes' : 'No'}</td>
                            <td className="p-3 text-right" onClick={(e) => e.stopPropagation()}>
                              <div className="flex items-center justify-end space-x-1">
                        <Button 
                          variant="ghost" 
                          size="sm"
                          onClick={() => handleEditAttribute(attr)}
                                  title="Edit Attribute"
                        >
                          <Edit className="h-4 w-4" />
                          <span className="ml-1">Edit</span>
                        </Button>
                        <Button 
                          variant="ghost" 
                          size="sm"
                          onClick={() => handleDeleteAttribute(attr.id)}
                                  title="Delete Attribute"
                          className="text-red-600 hover:text-red-700"
                        >
                          <Trash2 className="h-4 w-4" />
                          <span className="ml-1">Delete</span>
                        </Button>
                      </div>
                            </td>
                          </tr>
                  ))}
                      </tbody>
                    </table>
                </div>
              </div>

              </div>
            </div>
          </div>
        </div>
      )}

      {/* Attribute Detail Drawer (Outside data model drawer) */}
      {showAttributeDetail && (
        <div className="fixed inset-0" style={{ zIndex: Z_INDEX.modal }}>
          <div className="fixed inset-0 bg-black/50" onClick={() => setShowAttributeDetail(false)} />
          <div className="fixed right-0 top-0 h-screen w-[800px] bg-white shadow-2xl flex flex-col overflow-hidden">
            <div className="flex items-center justify-between border-b p-4">
              <h2 className="text-lg font-semibold">Attribute Details - {editingAttribute?.display_name || 'New Attribute'}</h2>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setShowAttributeDetail(false)}
              >
                <X className="h-4 w-4" />
              </Button>
            </div>
            <div className="flex flex-col h-full">
              <Tabs defaultValue="details" className="w-full flex-1 flex flex-col">
                <TabsList className="grid grid-cols-2 w-full flex-shrink-0">
                  <TabsTrigger value="details">Details</TabsTrigger>
                  <TabsTrigger value="options" disabled={!(attributeForm.data_type === 'select' || attributeForm.data_type === 'multiselect')}>Options</TabsTrigger>
                </TabsList>

                {/* Details Tab */}
                <TabsContent value="details" className="flex-1 overflow-y-auto p-4">
                  <div className="space-y-6">
                  {/* Attribute Code Section */}
                  <div className="flex items-center space-x-4">
                    <Label htmlFor="attr-code" className="w-32 text-right">Attribute Code</Label>
                    <Input
                      id="attr-code"
                      value={attributeForm.name}
                      onChange={(e) => setAttributeForm({ ...attributeForm, name: e.target.value })}
                      placeholder="attribute_code"
                      className="flex-1"
                    />
                  </div>

                  {/* Attribute Label Section */}
                  <div className="flex items-center space-x-4">
                    <Label htmlFor="attr-label" className="w-32 text-right">Attribute Label</Label>
                    <Input
                      id="attr-label"
                      value={attributeForm.display_name}
                      onChange={(e) => setAttributeForm({ ...attributeForm, display_name: e.target.value })}
                      placeholder="Attribute Label"
                      className="flex-1"
                    />
                  </div>

                  {/* Description Section */}
                  <div className="flex items-start space-x-4">
                    <Label htmlFor="attr-description" className="w-32 text-right mt-2">Description</Label>
                    <textarea
                      id="attr-description"
                      value={attributeForm.description}
                      onChange={(e) => setAttributeForm({ ...attributeForm, description: e.target.value })}
                      placeholder="Describe this attribute"
                      className="flex-1 p-2 border border-gray-300 rounded-md resize-vertical min-h-[80px]"
                      rows={3}
                    />
                  </div>

                  {/* Attribute Type Section */}
                  <div className="flex items-center space-x-4">
                    <Label htmlFor="attr-type" className="w-32 text-right">Attribute Type</Label>
                    <Select
                      value={attributeForm.data_type}
                      onValueChange={(value) => setAttributeForm({ ...attributeForm, data_type: value })}
                    >
                      <SelectTrigger className="flex-1">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="text">Text</SelectItem>
                        <SelectItem value="email">Email</SelectItem>
                        <SelectItem value="number">Number</SelectItem>
                        <SelectItem value="date">Date</SelectItem>
                        <SelectItem value="datetime">DateTime</SelectItem>
                        <SelectItem value="boolean">Boolean</SelectItem>
                        <SelectItem value="select">Single Select</SelectItem>
                        <SelectItem value="multiselect">Multi Select</SelectItem>
                        <SelectItem value="textarea">Textarea</SelectItem>
                        <SelectItem value="data_entity">Data Entity</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  
                  {/* Data Entity Configuration */}
                  {attributeForm.data_type === 'data_entity' && (
                    <>
                      {/* Data Model Section */}
                      <div className="flex items-center space-x-4">
                        <Label htmlFor="data-model-select" className="w-32 text-right">Data Model</Label>
                        <Combobox
                          options={[
                            { value: '', label: 'Select a data model' },
                            ...availableDataModels.map((model) => ({
                              value: model.id,
                              label: model.display_name || model.name
                            }))
                          ]}
                          value={selectedDataModelForEntity}
                          onValueChange={(value) => {
                            setSelectedDataModelForEntity(value)
                            loadAvailableAttributes(value)
                          }}
                          placeholder="Select a data model"
                        />
                      </div>

                      {/* Attribute Select Section */}
                      <div className="flex items-center space-x-4">
                        <Label htmlFor="attribute-select" className="w-32 text-right">Attribute Label</Label>
                        <select
                          id="attribute-select"
                          value={selectedAttributeForEntity}
                          onChange={(e) => setSelectedAttributeForEntity(e.target.value)}
                          className="flex-1 p-2 border border-gray-300 rounded-md"
                          disabled={!selectedDataModelForEntity}
                        >
                          <option value="">Select an attribute</option>
                          {availableAttributes.map((attr) => (
                            <option key={attr.id} value={attr.id}>
                              {attr.display_name || attr.name}
                            </option>
                          ))}
                        </select>
                      </div>
                    </>
                  )}
                  
                  {/* Auto Increment Configuration */}
                  <div className="space-y-4 border-t pt-4">
                    {/* Auto Increment Checkbox Section */}
                    <div className="flex items-center space-x-2">
                      <input
                        type="checkbox"
                        id="auto-increment"
                        checked={attributeForm.is_auto_increment}
                        onChange={(e) => setAttributeForm({ ...attributeForm, is_auto_increment: e.target.checked })}
                      />
                      <Label htmlFor="auto-increment">Auto Increment</Label>
                    </div>
                    
                    {attributeForm.is_auto_increment && (
                      <div className="space-y-4 pl-6">
                        {/* Prefix Section */}
                        <div className="flex items-center space-x-4">
                          <Label htmlFor="prefix" className="w-32 text-right">Prefix</Label>
                          <Input
                            id="prefix"
                            value={attributeForm.auto_increment_prefix}
                            onChange={(e) => setAttributeForm({ ...attributeForm, auto_increment_prefix: e.target.value })}
                            placeholder="e.g., CUST, ORD"
                            className="flex-1"
                          />
                        </div>

                        {/* Suffix Section */}
                        <div className="flex items-center space-x-4">
                          <Label htmlFor="suffix" className="w-32 text-right">Suffix</Label>
                          <Input
                            id="suffix"
                            value={attributeForm.auto_increment_suffix}
                            onChange={(e) => setAttributeForm({ ...attributeForm, auto_increment_suffix: e.target.value })}
                            placeholder="e.g., -2024, _V1"
                            className="flex-1"
                          />
                        </div>

                        {/* Start Number Section */}
                        <div className="flex items-center space-x-4">
                          <Label htmlFor="start-number" className="w-32 text-right">Start Number</Label>
                          <Input
                            id="start-number"
                            type="number"
                            value={attributeForm.auto_increment_start}
                            onChange={(e) => setAttributeForm({ ...attributeForm, auto_increment_start: parseInt(e.target.value) || 1 })}
                            placeholder="1"
                            className="flex-1"
                          />
                        </div>

                        {/* Number Padding Section */}
                        <div className="flex items-center space-x-4">
                          <Label htmlFor="padding" className="w-32 text-right">Number Padding</Label>
                          <Input
                            id="padding"
                            type="number"
                            value={attributeForm.auto_increment_padding}
                            onChange={(e) => setAttributeForm({ ...attributeForm, auto_increment_padding: parseInt(e.target.value) || 3 })}
                            placeholder="3"
                            className="flex-1"
                          />
                        </div>

                        {/* Preview Section */}
                        <div className="space-y-2">
                          <div className="text-sm text-gray-600 bg-gray-50 p-2 rounded">
                            <strong>Preview:</strong> {attributeForm.auto_increment_prefix}{String(attributeForm.auto_increment_start).padStart(attributeForm.auto_increment_padding, '0')}{attributeForm.auto_increment_suffix}
                          </div>
                          <div className="text-xs text-gray-500 mt-1">
                            Examples: CUST-001, ORD-2024-001, INV_001_V1
                          </div>
                          <div className="mt-2">
                            <Button
                              type="button"
                              variant="outline"
                              size="sm"
                              onClick={() => {
                                const nextValue = attributeForm.auto_increment_start + 1
                                const preview = `${attributeForm.auto_increment_prefix}${String(nextValue).padStart(attributeForm.auto_increment_padding, '0')}${attributeForm.auto_increment_suffix}`
                                alert(`Next value would be: ${preview}`)
                              }}
                            >
                              Test Next Value
                            </Button>
                          </div>
                        </div>
                      </div>
                    )}
                  </div>

                  {/* Min Length Section */}
                  <div className="flex items-center space-x-4">
                    <Label htmlFor="attr-min" className="w-32 text-right">Min Length</Label>
                    <Input
                      id="attr-min"
                      type="number"
                      value={attributeForm.min_length}
                      onChange={(e) => setAttributeForm({ ...attributeForm, min_length: parseInt(e.target.value) || 0 })}
                      placeholder="0"
                      className="flex-1"
                    />
                  </div>

                  {/* Max Length Section */}
                  <div className="flex items-center space-x-4">
                    <Label htmlFor="attr-max" className="w-32 text-right">Max Length</Label>
                    <Input
                      id="attr-max"
                      type="number"
                      value={attributeForm.max_length}
                      onChange={(e) => setAttributeForm({ ...attributeForm, max_length: parseInt(e.target.value) || 0 })}
                      placeholder="0"
                      className="flex-1"
                    />
                  </div>

                  {/* Default Value Section */}
                  <div className="flex items-center space-x-4">
                    <Label htmlFor="attr-default" className="w-32 text-right">Default Value</Label>
                    <Input
                      id="attr-default"
                      value={attributeForm.default_value}
                      onChange={(e) => setAttributeForm({ ...attributeForm, default_value: e.target.value })}
                      placeholder="Default value"
                      className="flex-1"
                    />
                  </div>

                  {/* Tooltip Section */}
                  <div className="flex items-center space-x-4">
                    <Label htmlFor="attr-tooltip" className="w-32 text-right">Tooltip</Label>
                    <Input
                      id="attr-tooltip"
                      value={attributeForm.tooltip}
                      onChange={(e) => setAttributeForm({ ...attributeForm, tooltip: e.target.value })}
                      placeholder="Helper text shown to users"
                      className="flex-1"
                    />
                  </div>
                </div>
                {/* Checkbox Options Section */}
                <div className="space-y-4">
                  {/* Required Checkbox Section */}
                  <div className="flex items-center space-x-4">
                    <Label htmlFor="is-required" className="w-32 text-right">Required</Label>
                    <input
                      type="checkbox"
                      id="is-required"
                      checked={attributeForm.is_required}
                      onChange={(e) => setAttributeForm({ ...attributeForm, is_required: e.target.checked })}
                    />
                  </div>

                  {/* Unique Checkbox Section */}
                  <div className="flex items-center space-x-4">
                    <Label htmlFor="is-unique" className="w-32 text-right">Unique</Label>
                    <input
                      type="checkbox"
                      id="is-unique"
                      checked={attributeForm.is_unique}
                      onChange={(e) => setAttributeForm({ ...attributeForm, is_unique: e.target.checked })}
                    />
                  </div>
                </div>
              </TabsContent>

                {/* Options Tab */}
                <TabsContent value="options" className="flex-1 overflow-y-auto p-4">
                <div className="border rounded-lg overflow-hidden">
                  <DragDropContext onDragEnd={handleAttributeOptionsDragEnd}>
                    <Droppable droppableId="attribute-options">
                      {(provided) => (
                        <div {...provided.droppableProps} ref={provided.innerRef}>
                          <table className="w-full text-sm">
                            <thead className="bg-muted/50">
                              <tr>
                                <th className="text-left p-2 w-8"></th>
                                <th className="text-left p-2">Value</th>
                                <th className="text-left p-2">Label</th>
                                <th className="text-left p-2">Color</th>
                                <th className="text-right p-2">Actions</th>
                              </tr>
                            </thead>
                            <tbody>
                              {attributeOptions.map((option, index) => (
                                <Draggable key={index} draggableId={`option-${index}`} index={index}>
                                  {(provided, snapshot) => (
                                    <tr 
                                      ref={provided.innerRef}
                                      {...provided.draggableProps}
                                      className={`border-t ${snapshot.isDragging ? 'bg-blue-50' : ''}`}
                                    >
                                      <td className="p-2" {...provided.dragHandleProps}>
                                        <GripVertical className="h-4 w-4 text-gray-400 cursor-move" />
                                      </td>
                                      <td className="p-2">
                                        <Input
                                          placeholder="Value"
                                          value={option.value}
                                          onChange={(e) => updateAttributeOption(index, 'value', e.target.value)}
                                        />
                                      </td>
                                      <td className="p-2">
                                        <Input
                                          placeholder="Label"
                                          value={option.label}
                                          onChange={(e) => updateAttributeOption(index, 'label', e.target.value)}
                                        />
                                      </td>
                                      <td className="p-2">
                                        <div className="flex items-center space-x-2">
                                          <div 
                                            className="w-6 h-6 rounded border cursor-pointer"
                                            style={{ backgroundColor: option.color }}
                                            onClick={() => {
                                              const newColor = option.color === '#3B82F6' ? '#DC2626' : 
                                                             option.color === '#DC2626' ? '#16A34A' : 
                                                             option.color === '#16A34A' ? '#CA8A04' : '#3B82F6'
                                              updateAttributeOption(index, 'color', newColor)
                                            }}
                                          />
                                          <ColorPicker
                                            value={option.color}
                                            onChange={(color) => updateAttributeOption(index, 'color', color)}
                                            className="flex-1"
                                          />
                                        </div>
                                      </td>
                                      <td className="p-2 text-right">
                                        <Button
                                          variant="ghost"
                                          size="sm"
                                          onClick={() => removeAttributeOption(index)}
                                          className="text-red-600"
                                        >
                                          <Trash2 className="h-4 w-4" />
                                        </Button>
                                      </td>
                                    </tr>
                                  )}
                                </Draggable>
                              ))}
                              {provided.placeholder}
                            </tbody>
                          </table>
                        </div>
                      )}
                    </Droppable>
                  </DragDropContext>
                </div>
                <Button variant="outline" size="sm" onClick={addAttributeOption}>
                  <Plus className="mr-2 h-4 w-4" />
                  Add Option
                </Button>
                </TabsContent>
              </Tabs>
              <div className="flex justify-end space-x-2 p-4 border-t flex-shrink-0">
              <Button variant="outline" onClick={() => setEditingAttribute(null)}>
                Cancel
              </Button>
              <Button onClick={handleSaveAttribute}>
                {editingAttribute ? 'Update Attribute' : 'Create Attribute'}
              </Button>
              </div>
            </div>
        </div>
      )}
    </MainLayout>
  )
}

function UsersSection() {
  const [users, setUsers] = useState<any[]>([])
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [page, setPage] = useState(1)
  const [limit, setLimit] = useState(10)
  const [total, setTotal] = useState(0)
  const [search, setSearch] = useState('')
  const [role, setRole] = useState('')
  const [isActive, setIsActive] = useState<string>('')

  const [open, setOpen] = useState(false)
  const [editing, setEditing] = useState<any | null>(null)
  const [form, setForm] = useState({ email: '', name: '', password: '', role: 'USER', is_active: true })

  const pages = useMemo(() => Math.max(1, Math.ceil(total / limit)), [total, limit])

  async function load() {
    setLoading(true)
    setError(null)
    try {
      const params = new URLSearchParams()
      params.set('page', String(page))
      params.set('limit', String(limit))
      if (search) params.set('search', search)
      if (role) params.set('role', role)
      if (isActive) params.set('is_active', isActive)
      const res = await fetch(`/api/users?${params.toString()}`)
      if (!res.ok) {
        const errorData = await res.json().catch(() => ({}))
        throw new Error(`Failed to load users: ${res.status} ${res.statusText} - ${errorData.error || 'Unknown error'}`)
      }
      const data = await res.json()
      setUsers(data.users || [])
      setTotal(data.pagination?.total || 0)
    } catch (e: any) {
      console.error('Load users error:', e)
      setError(e.message || 'Failed loading users')
    } finally {
      setLoading(false)
    }
  }

  useEffect(() => { load() }, [page, limit, role, isActive])

  function openCreate() {
    setEditing(null)
    setForm({ email: '', name: '', password: '', role: 'USER', is_active: true })
    setOpen(true)
  }

  function openEdit(u: any) {
    setEditing(u)
    setForm({ email: u.email, name: u.name, password: '', role: u.role, is_active: u.is_active })
    setOpen(true)
  }

  async function submit() {
    try {
      const method = editing ? 'PUT' : 'POST'
      const url = editing ? `/api/users/${editing.id}` : '/api/users'
      const payload: any = { email: form.email, name: form.name, role: form.role, is_active: form.is_active }
      if (!editing) payload.password = form.password
      if (editing && form.password) payload.password = form.password
      const res = await fetch(url, { method, headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload) })
      if (!res.ok) throw new Error('Save failed')
      setOpen(false)
      await load()
    } catch (e: any) {
      alert(e.message || 'Save failed')
    }
  }

  async function removeUser(id: string) {
    if (!confirm('Delete this user?')) return
    try {
      const res = await fetch(`/api/users/${id}`, { method: 'DELETE' })
      if (!res.ok) throw new Error('Delete failed')
      await load()
    } catch (e: any) {
      alert(e.message || 'Delete failed')
    }
  }

  return (
    <div className="space-y-4">
      <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-2">
        <div className="flex gap-2 items-center">
          <Input placeholder="Search" value={search} onChange={(e) => setSearch(e.target.value)} onKeyDown={(e) => { if (e.key === 'Enter') { setPage(1); load() } }} />
          <Input placeholder="Role (USER, MANAGER, ADMIN)" value={role} onChange={(e) => setRole(e.target.value.toUpperCase())} />
          <Input placeholder="Active (true/false)" value={isActive} onChange={(e) => setIsActive(e.target.value)} />
          <Button variant="outline" onClick={() => { setPage(1); load() }}>Filter</Button>
        </div>
        <div>
          <Button onClick={openCreate}>
            <Plus className="mr-2 h-4 w-4" />
            Add New User
          </Button>
        </div>
      </div>

      <div className="border rounded-md overflow-hidden">
        <table className="w-full text-sm">
          <thead className="bg-muted/50">
            <tr>
              <th className="text-left p-2">Email</th>
              <th className="text-left p-2">Name</th>
              <th className="text-left p-2">Role</th>
              <th className="text-left p-2">Active</th>
              <th className="text-right p-2">Actions</th>
            </tr>
          </thead>
          <tbody>
            {loading ? (
              <tr><td className="p-4" colSpan={5}>Loading...</td></tr>
            ) : error ? (
              <tr><td className="p-4 text-red-600" colSpan={5}>{error}</td></tr>
            ) : users.length === 0 ? (
              <tr><td className="p-4" colSpan={5}>No users found</td></tr>
            ) : (
              users.map(u => (
                <tr key={u.id} className="border-t">
                  <td className="p-2">{u.email}</td>
                  <td className="p-2">{u.name}</td>
                  <td className="p-2">{u.role}</td>
                  <td className="p-2">{u.is_active ? 'Yes' : 'No'}</td>
                  <td className="p-2 text-right">
                    <Button variant="outline" size="sm" className="mr-2" onClick={() => openEdit(u)}>Edit</Button>
                    <Button variant="destructive" size="sm" onClick={() => removeUser(u.id)}>Delete</Button>
                  </td>
                </tr>
              ))
            )}
          </tbody>
        </table>
      </div>

      <div className="flex items-center justify-between">
        <div className="text-sm text-muted-foreground">Page {page} of {pages}</div>
        <div className="flex gap-2">
          <Button variant="outline" disabled={page <= 1} onClick={() => setPage(p => Math.max(1, p - 1))}>Prev</Button>
          <Button variant="outline" disabled={page >= pages} onClick={() => setPage(p => Math.min(pages, p + 1))}>Next</Button>
        </div>
      </div>

      <Dialog open={open} onOpenChange={setOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>{editing ? 'Edit User' : 'Create User'}</DialogTitle>
          </DialogHeader>
          <div className="space-y-3">
            <div className="space-y-1">
              <Label>Email</Label>
              <Input value={form.email} onChange={(e) => setForm({ ...form, email: e.target.value })} placeholder="email@example.com" />
            </div>
            <div className="space-y-1">
              <Label>Name</Label>
              <Input value={form.name} onChange={(e) => setForm({ ...form, name: e.target.value })} placeholder="Full name" />
            </div>
            <div className="space-y-1">
              <Label>Role</Label>
              <RadioGroup value={form.role} onValueChange={(value: string) => setForm({ ...form, role: value })} className="flex flex-col space-y-2">
                <div className="flex items-center space-x-2">
                  <RadioGroupItem value="USER" id="user" />
                  <label htmlFor="user" className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">
                    User
                  </label>
                </div>
                <div className="flex items-center space-x-2">
                  <RadioGroupItem value="MANAGER" id="manager" />
                  <label htmlFor="manager" className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">
                    Manager
                  </label>
                </div>
                <div className="flex items-center space-x-2">
                  <RadioGroupItem value="ADMIN" id="admin" />
                  <label htmlFor="admin" className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">
                    Admin
                  </label>
                </div>
                <div className="flex items-center space-x-2">
                  <RadioGroupItem value="SUPER_ADMIN" id="super_admin" />
                  <label htmlFor="super_admin" className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">
                    Super Admin
                  </label>
                </div>
              </RadioGroup>
            </div>
            <div className="space-y-1">
              <Label>Active</Label>
              <Switch checked={form.is_active} onCheckedChange={(v) => setForm({ ...form, is_active: v })} />
            </div>
            {!editing && (
              <div className="space-y-1">
                <Label>Password</Label>
                <Input type="password" value={form.password} onChange={(e) => setForm({ ...form, password: e.target.value })} placeholder="Set a password" />
              </div>
            )}
            {editing && (
              <div className="space-y-1">
                <Label>New Password (optional)</Label>
                <Input type="password" value={form.password} onChange={(e) => setForm({ ...form, password: e.target.value })} placeholder="Leave blank to keep current" />
              </div>
            )}
          </div>
          <DialogFooter>
            <Button variant="outline" onClick={() => setOpen(false)}>Cancel</Button>
            <Button onClick={submit}>{editing ? 'Save Changes' : 'Create'}</Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  )
}

function RolesSection() {
  const [roles, setRoles] = useState<any[]>([])
  const [permissions, setPermissions] = useState<any[]>([])
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [open, setOpen] = useState(false)
  const [editing, setEditing] = useState<any | null>(null)
  const [name, setName] = useState('')
  const [description, setDescription] = useState('')
  const [selectedPerms, setSelectedPerms] = useState<string[]>([])

  async function load() {
    setLoading(true)
    setError(null)
    try {
      const [rRes, pRes] = await Promise.all([
        fetch('/api/roles'),
        fetch('/api/permissions'),
      ])
      
      if (!rRes.ok) {
        const errorData = await rRes.json().catch(() => ({}))
        throw new Error(`Failed to load roles: ${rRes.status} ${rRes.statusText} - ${errorData.error || 'Unknown error'}`)
      }
      
      if (!pRes.ok) {
        const errorData = await pRes.json().catch(() => ({}))
        throw new Error(`Failed to load permissions: ${pRes.status} ${pRes.statusText} - ${errorData.error || 'Unknown error'}`)
      }
      
      const r = await rRes.json()
      const p = await pRes.json()
      setRoles(r.roles || [])
      setPermissions(p.permissions || [])
    } catch (e: any) {
      console.error('Load roles/permissions error:', e)
      setError(e.message || 'Failed to load roles')
    } finally {
      setLoading(false)
    }
  }

  useEffect(() => { load() }, [])

  function openCreate() {
    setEditing(null)
    setName('')
    setDescription('')
    setSelectedPerms([])
    setOpen(true)
  }

  function openEdit(role: any) {
    setEditing(role)
    setName(role.name)
    setDescription(role.description || '')
    setSelectedPerms((role.permissions || []).map((p: any) => p.id))
    setOpen(true)
  }

  async function save() {
    try {
      if (!name.trim()) throw new Error('Name is required')
      if (editing) {
        const res = await fetch(`/api/roles/${editing.id}`, { method: 'PUT', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ name, description }) })
        if (!res.ok) throw new Error('Failed to update role')
      } else {
        const res = await fetch('/api/roles', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ name, description }) })
        if (!res.ok) throw new Error('Failed to create role')
      }

      // Update permissions mapping
      const targetRoleId = editing ? editing.id : (await (await fetch('/api/roles')).json()).roles.find((r: any) => r.name === name)?.id
      if (targetRoleId) {
        const pres = await fetch(`/api/roles/${targetRoleId}/permissions`, { method: 'PUT', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ permissionIds: selectedPerms }) })
        if (!pres.ok) throw new Error('Failed to update permissions')
      }

      setOpen(false)
      await load()
    } catch (e: any) {
      alert(e.message || 'Save failed')
    }
  }

  async function remove(id: string) {
    if (!confirm('Delete this role?')) return
    try {
      const res = await fetch(`/api/roles/${id}`, { method: 'DELETE' })
      if (!res.ok) throw new Error('Delete failed')
      await load()
    } catch (e: any) {
      alert(e.message || 'Delete failed')
    }
  }

  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between">
        <div className="text-sm text-muted-foreground">Manage application roles and permissions</div>
        <Button onClick={openCreate}>Create Role</Button>
      </div>

      <div className="border rounded-md overflow-hidden">
        <table className="w-full text-sm">
          <thead className="bg-muted/50">
            <tr>
              <th className="text-left p-2">Name</th>
              <th className="text-left p-2">Description</th>
              <th className="text-left p-2">Permissions</th>
              <th className="text-right p-2">Actions</th>
            </tr>
          </thead>
          <tbody>
            {loading ? (
              <tr><td className="p-4" colSpan={4}>Loading...</td></tr>
            ) : error ? (
              <tr><td className="p-4 text-red-600" colSpan={4}>{error}</td></tr>
            ) : roles.length === 0 ? (
              <tr><td className="p-4" colSpan={4}>No roles</td></tr>
            ) : (
              roles.map(r => (
                <tr key={r.id} className="border-t">
                  <td className="p-2">{r.name}</td>
                  <td className="p-2">{r.description || '-'}</td>
                  <td className="p-2">{(r.permissions || []).map((p: any) => p.name).join(', ') || '-'}</td>
                  <td className="p-2 text-right">
                    <Button variant="outline" size="sm" className="mr-2" onClick={() => openEdit(r)}>Edit</Button>
                    <Button variant="destructive" size="sm" onClick={() => remove(r.id)}>Delete</Button>
                  </td>
                </tr>
              ))
            )}
          </tbody>
        </table>
      </div>

      <Dialog open={open} onOpenChange={setOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>{editing ? 'Edit Role' : 'Create Role'}</DialogTitle>
          </DialogHeader>
          <div className="space-y-3">
            <div className="space-y-1">
              <Label>Name</Label>
              <Input value={name} onChange={(e) => setName(e.target.value)} placeholder="Role name" />
            </div>
            <div className="space-y-1">
              <Label>Description</Label>
              <Input value={description} onChange={(e) => setDescription(e.target.value)} placeholder="Optional" />
            </div>
            <div className="space-y-1">
              <Label>Permissions</Label>
              <div className="grid grid-cols-2 md:grid-cols-3 gap-2 max-h-64 overflow-auto border rounded p-2">
                {permissions.map((p) => {
                  const checked = selectedPerms.includes(p.id)
                  return (
                    <label key={p.id} className="flex items-center gap-2 text-sm">
                      <input
                        type="checkbox"
                        checked={checked}
                        onChange={(e) => {
                          const next = new Set(selectedPerms)
                          if (e.target.checked) next.add(p.id)
                          else next.delete(p.id)
                          setSelectedPerms(Array.from(next))
                        }}
                      />
                      <span>{p.name}</span>
                    </label>
                  )
                })}
              </div>
            </div>
          </div>
          <DialogFooter>
            <Button variant="outline" onClick={() => setOpen(false)}>Cancel</Button>
            <Button onClick={save}>Save</Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  )
}
